1. 컴파일 의존성에 추가하기 = (컴파일 시, 동작)
-------------------------------------------
▷ File Path: application.yml
-------------------------------------------
// H2 컴파일 의존성 설정.
datasource:
    url: jdbc:h2:mem:testdb

spring:
    h2:
        console:
            enabled: true
-------------------------------------------
application.yml에 추가하는 내용은 컴파일 의존성에 포함되어야 하는 내용으로,
H2와 같은 메모리 데이터베이스는 보통 테스트용으로만 써야하므로, 위와 같이 추가하지 않는다.


2. 런타임 의존성에 추가하기 = (런타임 시, 동작)
컴파일 시가 아닌, 런타임 시에 의존하고 싶을 때는 아래와 같이 'build.gradle'에 추가한다.
-------------------------------------------
▷ File Path: build.gradle
-------------------------------------------
// H2 런타임 의존성 설정.
runtime('com.h2database:h2')
-------------------------------------------


3. 스프링 부트 테스트
일반적으로 스프링부트에서는 테스트 스타터를 제공한다. 테스트 스타터는 아래의 두 가지 모듈로 구성된다.
[spring-boot-test]
[spring-boot-test-autoconfigure]
이 두가지 모듈은 테스트 관련 자동 설정 기능을 제공하며, 이 두 가지 모듈을 아래의 하나의 모듈에서 처리한다.
[spring-boot-starter-test] = [spring-boot-test] + [spring-boot-test-autoconfigure]


4. 스프링 부트 테스트 - @SpringBootTest
@SpringBootTest는 실제 구동되는 애플리케이션과 똑같이 애플리케이션 컨텍스트를 로드하여 테스트하기 때문에 하고 싶은 테스트를 모두 수행할 수 있다.
단, 애플리케이션에 설정된 빈을 모두 로드하기 때문에 애플리케이션 규모가 클수록 느려진다.
이렇게 되면 '단위 테스트'라는 의미가 희석된다.


5. @RestController와 @Controller 사용
@RestController가 붙은 클래스의 모든 메서드는 반환 값이 HTTP Response Body에 쓰여서 화면에 직접 나타난다.
@Controller가 붙은 클래스의 경우에는 메서드에 @ResponseBody가 있는지의 유무에 따라
있는 경우: 메서드의 반환 값이 HTTP Response Body에 쓰여서 화면에 직접 나타나고,
없는 경우: 메서드의 반환 값이 view file의 이름이 된다.